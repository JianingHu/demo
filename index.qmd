---
title: "demo"
date: "`r Sys.time()`"
author: Jianing Hu
format:
  html:
    code-fold: true
  revealjs:
     slide-number: true
     show-slide-number: all
     preview-links: auto
     width: 1280
     height: 720
     theme: default
     self_contained: yes
     css: custom.css
execute:
  echo: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE)

library(tidyverse)
library(ggplot2)
library(plotly)
library(glue)
library(webshot)
theme_set(theme_classic())

sld_change <- read_csv("sld_data.csv")
# sld <- data.frame(
#   id = c(c(rep('00', 10), rep('01', 10))),
#   measurement_value = runif(20, 0, 100)) |>
#   group_by(id) |>
#   mutate(trial_day = (row_number()-1)*9) |>
#   ungroup()

# sld_change <- sld |> group_by(id) |>
#   mutate(baseline_sld = first(measurement_value, trial_day),
#          percent_change = (measurement_value - baseline_sld)/baseline_sld)
```

## Simulation

```{r}
sld_sim <- bind_rows(
  lapply(c("0.7x", "1x", "1.3x", "1.6x"), 
         function(i) mutate(sld_change, trial_arm = i))) |>
  mutate(mod_level = as.numeric(str_extract(trial_arm, "\\d+(\\.\\d+)?")),
         # still need discuss how to calculate
         percent_change = ifelse(percent_change < 0,
                                 percent_change * mod_level,
                                 percent_change * (2-mod_level)),
         percent_change = ifelse(percent_change < -1, -1, percent_change),
         sim_id = glue::glue('{trial_arm}-{id}')) |>
  group_by(sim_id) |>
  mutate(percent_change = ifelse(cumsum(percent_change == -1) > 0, -1, percent_change))

sim_id_cutoff = sld_sim |> filter(trial_arm != "1") |> distinct(sim_id) |> pull()

cutoff <- data.frame(
  sim_id = sim_id_cutoff,
  # mean(rnbinom(100, size = 5, prob = 0.3) < 6)
  cutoff_number = rnbinom(length(sim_id_cutoff), size = 5, prob = 0.3)
)

cutoff_sim <- sld_sim|>
  left_join(cutoff) |>
  mutate(cutoff_number = ifelse(is.na(cutoff_number), Inf, cutoff_number)) |>
  group_by(sim_id) |>
  arrange(trial_day) |>
  slice(seq_len(min(cutoff_number, n())))
```

We simulate patients with 1.3x, 1.6x, 1.9x depth of response according to their original ones, and cutoff the simulations randomly.

We generated these data with four different depths of responses to emulate the outcomes of the same patient under four different treatments.

Let's see how it works for a specific patient.

::: panel-tabset

### Plot On One Patient 

```{r}
{ggplot(sld_sim |> filter(id == "6"), aes(x=trial_day, y=percent_change, group=sim_id , color=trial_arm))+
  geom_line() +
  geom_point()} |>
  ggplotly()
```


### All Patients w. All Treatments
```{r}
{ggplot(sld_sim, aes(x=trial_day, y=percent_change, group=sim_id , color=trial_arm))+
  geom_line(alpha = 0.5) +
  geom_point(size = 1)} |>
  ggplotly()
```
:::

## waterfall

```{r}
sld_long <- sld_change |>
  group_by(id) |>
  mutate(num_records = n()) |>
  filter(num_records > 2)

{ggplot(sld_long, aes(x=trial_day, y=percent_change, group=id , color=BOR))+
  geom_line(alpha = 0.5) +
  geom_point(size = 1)} |>
  ggplotly()
```


## Tumor Response

```{r}
sld_change %>%
  group_by(id) %>%
  slice(-1) %>%
  summarise(BOR, 
            max_depth_of_response = min(percent_change)) %>%
  ungroup() %>%
  distinct() %>%
  arrange(-max_depth_of_response) %>%
  mutate(rank = row_number()) %>%
  ggplot(aes(x = rank, y = max_depth_of_response, fill = BOR)) +
  geom_bar(stat = "identity", width = 0.9) +
  geom_hline(yintercept = 0) +
  geom_hline(yintercept = 0.3, linetype = "dashed") +
  geom_hline(yintercept = -0.2, linetype = "dashed") +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(title = "Waterfall Plot for Max Depth of Response",
       x = "rank",
       y = "max depth of response",
       fill = "")
```


```{r}
test <- 
sld_change %>%
  group_by(id) %>%
  mutate(small_change = min(percent_change),
         reduction_from_small = (percent_change - small_change)/(1 - small_change)) %>%
  slice(-1) %>%
  # mutate(best_reduction = min(percent_change)) %>%
  mutate(objective_response = case_when(
    percent_change == -1 ~ "CR",
    percent_change < -.3 ~ "PR",
    reduction_from_small > .2 ~ "PD",
    TRUE ~ "SD")) %>%
  distinct() 
# lag
```



